////////////////////////////////////////////////////////////////////////////
//            haXe Implementation of Apple Lossless Decoder               //
//                 Copyright (c) 2011 Peter McQuillan                     //
//                          All Rights Reserved.                          //
//      Distributed under the BSD Software License (see license.txt)      //
////////////////////////////////////////////////////////////////////////////

This package contains a haXe implementation of an Apple Lossless decoder.
It is ported from v0.2.0 of the Apple Lossless decoder written by David Hammerton.
This code supports both 16-bit and 24-bit Apple Lossless files.

It is packaged with 2 demo command-line programs that accept a
Apple Lossless audio file as input and output a RIFF wav file.
One demo command-line program is designed to run with Neko, the
other uses your C++ compiler to produce a native executable.

The program was developed using haXe compiler 2.07 and NekoVM 1.8.1

===
To compile the .hx files for use with Neko, use the following command

haxe nekoALAC.hxml

To run the demo program, use the following command

neko alac.n  <input.m4a> <output.wav>

where input.m4a is the name of the Apple Lossless file you wish to decode to a WAV file.
===
To produce C++ output and an executable made from this C++ code, you will need to
have a C++ compiler installed on your computer.
You will also need to install the hxcpp haXe library.

1) Make sure haxelib is setup, you can do this by running

haxelib setup

2) You then need to install hxcpp

haxelib install hxcpp

To produce the C++ output, use the following command

haxe cppALAC.hxml

This will create a directory called haxecpp. In this directory you will find all
the generated C++ files.
You will also find an executable called CPPMain

To run this executable, use the following command

./CPPMain <input.m4a> <output.wav>

where input.m4a is the name of the Apple Lossless file you wish to decode to a WAV file.

===
It is also possible to make a demo Flash output file. The demo program currently
only works correctly with 16-bit 44.1 kHZ files. This sample rate restriction is a 
limitation of the Flash audio playback system.

To make the Flash swf, simply run

haxe flashALAC.hxml

When you call the SWF file it will display a Play button, clicking on this will 
bring up a file browser prompt. Using this file browser, select a Apple Lossless file 
you wish to play.
Flash 10 is required to use this demo SWF file.
===

This code is ported from v0.2.0 of the Apple Lossless decoder written by David Hammerton.
However there are also some extra changes, for example:

* The original code to read the hdlr atom was capable of generating a minus value seek
after reading strlen - this causes problems if there is poor or non-existent seeking 
support
* The stream handling code is now written so that it keeps track of where in the input
stream it is - this is needed for handling the case where the mdat atom comes before the
moov atom (and you have poor/non-existent seeking support)
* The stsz atom handling code assumed variable sample sizes, it now also handles fixed
sample sizes.


Please direct any questions or comments to beatofthedrum@gmail.com